{"ast":null,"code":"import _slicedToArray from\"C:/Users/91831/Desktop/React_Password_Generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";export var usePasswordGenerator=function usePasswordGenerator(){// Initialize state variables for the generated password and error message\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),password=_useState2[0],setPassword=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),errorMessage=_useState4[0],setErrorMessage=_useState4[1];// Function to generate a password based on user input\nvar generatePassword=function generatePassword(checkBoxData,length){var charset=\"\";var selectedCheckBoxes=checkBoxData.filter(function(item){return item.state;});// Check if at least one option is selected\nif(selectedCheckBoxes.length===0){setErrorMessage(\"Please select at least one option\");setPassword(\"\");// Clear the password if no option is selected\n}else{// Loop through the selected options and build the character set\nselectedCheckBoxes.forEach(function(item){switch(item.title){case\"Include Uppercase\":charset+=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";break;case\"Include Lowercase\":charset+=\"abcdefghijklmnopqrstuvwxyz\";break;case\"Include Numbers\":charset+=\"0123456789\";break;case\"Include Symbols\":charset+=\"!@#$%^&*()_+\";break;default:break;}});// Generate the password using the character set and specified length\nvar generatedPassword=\"\";for(var i=0;i<length;i++){var randomIndex=Math.floor(Math.random()*charset.length);generatedPassword+=charset[randomIndex];}// Set the generated password and clear any previous error message\nsetPassword(generatedPassword);setErrorMessage(\"\");}};// Return the generated password, error message, and the generatePassword function\nreturn{password:password,errorMessage:errorMessage,generatePassword:generatePassword};};","map":{"version":3,"names":["useState","usePasswordGenerator","_useState","_useState2","_slicedToArray","password","setPassword","_useState3","_useState4","errorMessage","setErrorMessage","generatePassword","checkBoxData","length","charset","selectedCheckBoxes","filter","item","state","forEach","title","generatedPassword","i","randomIndex","Math","floor","random"],"sources":["C:/Users/91831/Desktop/React_Password_Generator/src/usePasswordGenerator.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nexport const usePasswordGenerator = () => {\r\n  // Initialize state variables for the generated password and error message\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  // Function to generate a password based on user input\r\n  const generatePassword = (checkBoxData, length) => {\r\n    let charset = \"\";\r\n    const selectedCheckBoxes = checkBoxData.filter((item) => item.state);\r\n\r\n    // Check if at least one option is selected\r\n    if (selectedCheckBoxes.length === 0) {\r\n      setErrorMessage(\"Please select at least one option\");\r\n      setPassword(\"\"); // Clear the password if no option is selected\r\n    } else {\r\n      // Loop through the selected options and build the character set\r\n      selectedCheckBoxes.forEach((item) => {\r\n        switch (item.title) {\r\n          case \"Include Uppercase\":\r\n            charset += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n            break;\r\n          case \"Include Lowercase\":\r\n            charset += \"abcdefghijklmnopqrstuvwxyz\";\r\n            break;\r\n          case \"Include Numbers\":\r\n            charset += \"0123456789\";\r\n            break;\r\n          case \"Include Symbols\":\r\n            charset += \"!@#$%^&*()_+\";\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n\r\n      // Generate the password using the character set and specified length\r\n      let generatedPassword = \"\";\r\n      for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * charset.length);\r\n        generatedPassword += charset[randomIndex];\r\n      }\r\n\r\n      // Set the generated password and clear any previous error message\r\n      setPassword(generatedPassword);\r\n      setErrorMessage(\"\");\r\n    }\r\n  };\r\n\r\n  // Return the generated password, error message, and the generatePassword function\r\n  return { password, errorMessage, generatePassword };\r\n};\r\n"],"mappings":"yKAAA,OAASA,QAAQ,KAAQ,OAAO,CAEhC,MAAO,IAAM,CAAAC,oBAAoB,CAAG,QAAvB,CAAAA,oBAAoBA,CAAA,CAAS,CACxC;AACA,IAAAC,SAAA,CAAgCF,QAAQ,CAAC,EAAE,CAAC,CAAAG,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAArCG,QAAQ,CAAAF,UAAA,IAAEG,WAAW,CAAAH,UAAA,IAC5B,IAAAI,UAAA,CAAwCP,QAAQ,CAAC,EAAE,CAAC,CAAAQ,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAA7CE,YAAY,CAAAD,UAAA,IAAEE,eAAe,CAAAF,UAAA,IAEpC;AACA,GAAM,CAAAG,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIC,YAAY,CAAEC,MAAM,CAAK,CACjD,GAAI,CAAAC,OAAO,CAAG,EAAE,CAChB,GAAM,CAAAC,kBAAkB,CAAGH,YAAY,CAACI,MAAM,CAAC,SAACC,IAAI,QAAK,CAAAA,IAAI,CAACC,KAAK,GAAC,CAEpE;AACA,GAAIH,kBAAkB,CAACF,MAAM,GAAK,CAAC,CAAE,CACnCH,eAAe,CAAC,mCAAmC,CAAC,CACpDJ,WAAW,CAAC,EAAE,CAAC,CAAE;AACnB,CAAC,IAAM,CACL;AACAS,kBAAkB,CAACI,OAAO,CAAC,SAACF,IAAI,CAAK,CACnC,OAAQA,IAAI,CAACG,KAAK,EAChB,IAAK,mBAAmB,CACtBN,OAAO,EAAI,4BAA4B,CACvC,MACF,IAAK,mBAAmB,CACtBA,OAAO,EAAI,4BAA4B,CACvC,MACF,IAAK,iBAAiB,CACpBA,OAAO,EAAI,YAAY,CACvB,MACF,IAAK,iBAAiB,CACpBA,OAAO,EAAI,cAAc,CACzB,MACF,QACE,MACJ,CACF,CAAC,CAAC,CAEF;AACA,GAAI,CAAAO,iBAAiB,CAAG,EAAE,CAC1B,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGT,MAAM,CAAES,CAAC,EAAE,CAAE,CAC/B,GAAM,CAAAC,WAAW,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGZ,OAAO,CAACD,MAAM,CAAC,CAC9DQ,iBAAiB,EAAIP,OAAO,CAACS,WAAW,CAAC,CAC3C,CAEA;AACAjB,WAAW,CAACe,iBAAiB,CAAC,CAC9BX,eAAe,CAAC,EAAE,CAAC,CACrB,CACF,CAAC,CAED;AACA,MAAO,CAAEL,QAAQ,CAARA,QAAQ,CAAEI,YAAY,CAAZA,YAAY,CAAEE,gBAAgB,CAAhBA,gBAAiB,CAAC,CACrD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}